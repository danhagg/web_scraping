{"\nabs(x)\u00c2\u00b6": "Return the absolute value of a number.  The argument may be an\ninteger or a floating point number.  If the argument is a complex number, its\nmagnitude is returned.\n", "\nall(iterable)\u00c2\u00b6": "Return True if all elements of the iterable are true (or if the iterable\nis empty).  Equivalent to:\ndef all(iterable):\n    for element in iterable:\n        if not element:\n            return False\n    return True\n\n\n", "\nany(iterable)\u00c2\u00b6": "Return True if any element of the iterable is true.  If the iterable\nis empty, return False.  Equivalent to:\ndef any(iterable):\n    for element in iterable:\n        if element:\n            return True\n    return False\n\n\n", "\nascii(object)\u00c2\u00b6": "As repr(), return a string containing a printable representation of an\nobject, but escape the non-ASCII characters in the string returned by\nrepr() using \\x, \\u or \\U escapes.  This generates a string\nsimilar to that returned by repr() in Python 2.\n", "\nbin(x)\u00c2\u00b6": "\nConvert an integer number to a binary string prefixed with \u00e2\u0080\u009c0b\u00e2\u0080\u009d. The result\nis a valid Python expression. If x is not a Python int object, it\nhas to define an __index__() method that returns an integer. Some\nexamples:\n>>> bin(3)\n'0b11'\n>>> bin(-10)\n'-0b1010'\n\n\nIf prefix \u00e2\u0080\u009c0b\u00e2\u0080\u009d is desired or not, you can use either of the following ways.\n>>> format(14, '#b'), format(14, 'b')\n('0b1110', '1110')\n>>> f'{14:#b}', f'{14:b}'\n('0b1110', '1110')\n\n\n\nSee also format() for more information.\n", "\ncallable(object)\u00c2\u00b6": "Return True if the object argument appears callable,\nFalse if not.  If this returns true, it is still possible that a\ncall fails, but if it is false, calling object will never succeed.\nNote that classes are callable (calling a class returns a new instance);\ninstances are callable if their class has a __call__() method.\n\nNew in version 3.2: This function was first removed in Python 3.0 and then brought back\nin Python 3.2.\n\n", "\nchr(i)\u00c2\u00b6": "Return the string representing a character whose Unicode code point is the\ninteger i.  For example, chr(97) returns the string 'a', while\nchr(8364) returns the string '\u00e2\u0082\u00ac'. This is the inverse of ord().\nThe valid range for the argument is from 0 through 1,114,111 (0x10FFFF in\nbase 16).  ValueError will be raised if i is outside that range.\n", "\n@classmethod\u00c2\u00b6": "Transform a method into a class method.\nA class method receives the class as implicit first argument, just like an\ninstance method receives the instance. To declare a class method, use this\nidiom:\nclass C:\n    @classmethod\n    def f(cls, arg1, arg2, ...): ...\n\n\nThe @classmethod form is a function decorator \u00e2\u0080\u0093 see the description\nof function definitions in Function definitions for details.\nIt can be called either on the class (such as C.f()) or on an instance (such\nas C().f()).  The instance is ignored except for its class. If a class\nmethod is called for a derived class, the derived class object is passed as the\nimplied first argument.\nClass methods are different than C++ or Java static methods. If you want those,\nsee staticmethod() in this section.\nFor more information on class methods, consult the documentation on the standard\ntype hierarchy in The standard type hierarchy.\n", "\ncompile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)\u00c2\u00b6": "Compile the source into a code or AST object.  Code objects can be executed\nby exec() or eval().  source can either be a normal string, a\nbyte string, or an AST object.  Refer to the ast module documentation\nfor information on how to work with AST objects.\nThe filename argument should give the file from which the code was read;\npass some recognizable value if it wasn\u00e2\u0080\u0099t read from a file ('<string>' is\ncommonly used).\nThe mode argument specifies what kind of code must be compiled; it can be\n'exec' if source consists of a sequence of statements, 'eval' if it\nconsists of a single expression, or 'single' if it consists of a single\ninteractive statement (in the latter case, expression statements that\nevaluate to something other than None will be printed).\nThe optional arguments flags and dont_inherit control which future\nstatements (see PEP 236) affect the compilation of source.  If neither\nis present (or both are zero) the code is compiled with those future\nstatements that are in effect in the code that is calling compile().  If the\nflags argument is given and dont_inherit is not (or is zero) then the\nfuture statements specified by the flags argument are used in addition to\nthose that would be used anyway. If dont_inherit is a non-zero integer then\nthe flags argument is it \u00e2\u0080\u0093 the future statements in effect around the call\nto compile are ignored.\nFuture statements are specified by bits which can be bitwise ORed together to\nspecify multiple statements.  The bitfield required to specify a given feature\ncan be found as the compiler_flag attribute on\nthe _Feature instance in the __future__ module.\nThe argument optimize specifies the optimization level of the compiler; the\ndefault value of -1 selects the optimization level of the interpreter as\ngiven by -O options.  Explicit levels are 0 (no optimization;\n__debug__ is true), 1 (asserts are removed, __debug__ is false)\nor 2 (docstrings are removed too).\nThis function raises SyntaxError if the compiled source is invalid,\nand ValueError if the source contains null bytes.\nIf you want to parse Python code into its AST representation, see\nast.parse().\n\nNote\nWhen compiling a string with multi-line code in 'single' or\n'eval' mode, input must be terminated by at least one newline\ncharacter.  This is to facilitate detection of incomplete and complete\nstatements in the code module.\n\n\nChanged in version 3.2: Allowed use of Windows and Mac newlines.  Also input in 'exec' mode\ndoes not have to end in a newline anymore.  Added the optimize parameter.\n\n\nChanged in version 3.5: Previously, TypeError was raised when null bytes were encountered\nin source.\n\n", "\ndelattr(object, name)\u00c2\u00b6": "This is a relative of setattr().  The arguments are an object and a\nstring.  The string must be the name of one of the object\u00e2\u0080\u0099s attributes.  The\nfunction deletes the named attribute, provided the object allows it.  For\nexample, delattr(x, 'foobar') is equivalent to del x.foobar.\n", "\ndir([object])\u00c2\u00b6": "Without arguments, return the list of names in the current local scope.  With an\nargument, attempt to return a list of valid attributes for that object.\nIf the object has a method named __dir__(), this method will be called and\nmust return the list of attributes. This allows objects that implement a custom\n__getattr__() or __getattribute__() function to customize the way\ndir() reports their attributes.\nIf the object does not provide __dir__(), the function tries its best to\ngather information from the object\u00e2\u0080\u0099s __dict__ attribute, if defined, and\nfrom its type object.  The resulting list is not necessarily complete, and may\nbe inaccurate when the object has a custom __getattr__().\nThe default dir() mechanism behaves differently with different types of\nobjects, as it attempts to produce the most relevant, rather than complete,\ninformation:\n\nIf the object is a module object, the list contains the names of the module\u00e2\u0080\u0099s\nattributes.\nIf the object is a type or class object, the list contains the names of its\nattributes, and recursively of the attributes of its bases.\nOtherwise, the list contains the object\u00e2\u0080\u0099s attributes\u00e2\u0080\u0099 names, the names of its\nclass\u00e2\u0080\u0099s attributes, and recursively of the attributes of its class\u00e2\u0080\u0099s base\nclasses.\n\nThe resulting list is sorted alphabetically.  For example:\n>>> import struct\n>>> dir()   # show the names in the module namespace\n['__builtins__', '__name__', 'struct']\n>>> dir(struct)   # show the names in the struct module \n['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__',\n '__initializing__', '__loader__', '__name__', '__package__',\n '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',\n 'unpack', 'unpack_from']\n>>> class Shape:\n...     def __dir__(self):\n...         return ['area', 'perimeter', 'location']\n>>> s = Shape()\n>>> dir(s)\n['area', 'location', 'perimeter']\n\n\n\nNote\nBecause dir() is supplied primarily as a convenience for use at an\ninteractive prompt, it tries to supply an interesting set of names more\nthan it tries to supply a rigorously or consistently defined set of names,\nand its detailed behavior may change across releases.  For example,\nmetaclass attributes are not in the result list when the argument is a\nclass.\n\n", "\ndivmod(a, b)\u00c2\u00b6": "Take two (non complex) numbers as arguments and return a pair of numbers\nconsisting of their quotient and remainder when using integer division.  With\nmixed operand types, the rules for binary arithmetic operators apply.  For\nintegers, the result is the same as (a // b, a % b). For floating point\nnumbers the result is (q, a % b), where q is usually math.floor(a /\nb) but may be 1 less than that.  In any case q * b + a % b is very\nclose to a, if a % b is non-zero it has the same sign as b, and 0\n<= abs(a % b) < abs(b).\n", "\nenumerate(iterable, start=0)\u00c2\u00b6": "Return an enumerate object. iterable must be a sequence, an\niterator, or some other object which supports iteration.\nThe __next__() method of the iterator returned by\nenumerate() returns a tuple containing a count (from start which\ndefaults to 0) and the values obtained from iterating over iterable.\n>>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n>>> list(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n>>> list(enumerate(seasons, start=1))\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\n\nEquivalent to:\ndef enumerate(sequence, start=0):\n    n = start\n    for elem in sequence:\n        yield n, elem\n        n += 1\n\n\n", "\neval(expression, globals=None, locals=None)\u00c2\u00b6": "The arguments are a string and optional globals and locals.  If provided,\nglobals must be a dictionary.  If provided, locals can be any mapping\nobject.\nThe expression argument is parsed and evaluated as a Python expression\n(technically speaking, a condition list) using the globals and locals\ndictionaries as global and local namespace.  If the globals dictionary is\npresent and lacks \u00e2\u0080\u0098__builtins__\u00e2\u0080\u0099, the current globals are copied into globals\nbefore expression is parsed.  This means that expression normally has full\naccess to the standard builtins module and restricted environments are\npropagated.  If the locals dictionary is omitted it defaults to the globals\ndictionary.  If both dictionaries are omitted, the expression is executed in the\nenvironment where eval() is called.  The return value is the result of\nthe evaluated expression. Syntax errors are reported as exceptions.  Example:\n>>> x = 1\n>>> eval('x+1')\n2\n\n\nThis function can also be used to execute arbitrary code objects (such as\nthose created by compile()).  In this case pass a code object instead\nof a string.  If the code object has been compiled with 'exec' as the\nmode argument, eval()\u00e2\u0080\u0099s return value will be None.\nHints: dynamic execution of statements is supported by the exec()\nfunction.  The globals() and locals() functions\nreturns the current global and local dictionary, respectively, which may be\nuseful to pass around for use by eval() or exec().\nSee ast.literal_eval() for a function that can safely evaluate strings\nwith expressions containing only literals.\n", "\nexec(object[, globals[, locals]])\u00c2\u00b6": "This function supports dynamic execution of Python code. object must be\neither a string or a code object.  If it is a string, the string is parsed as\na suite of Python statements which is then executed (unless a syntax error\noccurs). [1] If it is a code object, it is simply executed.  In all cases,\nthe code that\u00e2\u0080\u0099s executed is expected to be valid as file input (see the\nsection \u00e2\u0080\u009cFile input\u00e2\u0080\u009d in the Reference Manual). Be aware that the\nreturn and yield statements may not be used outside of\nfunction definitions even within the context of code passed to the\nexec() function. The return value is None.\nIn all cases, if the optional parts are omitted, the code is executed in the\ncurrent scope.  If only globals is provided, it must be a dictionary, which\nwill be used for both the global and the local variables.  If globals and\nlocals are given, they are used for the global and local variables,\nrespectively.  If provided, locals can be any mapping object.  Remember\nthat at module level, globals and locals are the same dictionary. If exec\ngets two separate objects as globals and locals, the code will be\nexecuted as if it were embedded in a class definition.\nIf the globals dictionary does not contain a value for the key\n__builtins__, a reference to the dictionary of the built-in module\nbuiltins is inserted under that key.  That way you can control what\nbuiltins are available to the executed code by inserting your own\n__builtins__ dictionary into globals before passing it to exec().\n\nNote\nThe built-in functions globals() and locals() return the current\nglobal and local dictionary, respectively, which may be useful to pass around\nfor use as the second and third argument to exec().\n\n\nNote\nThe default locals act as described for function locals() below:\nmodifications to the default locals dictionary should not be attempted.\nPass an explicit locals dictionary if you need to see effects of the\ncode on locals after function exec() returns.\n\n", "\nfilter(function, iterable)\u00c2\u00b6": "Construct an iterator from those elements of iterable for which function\nreturns true.  iterable may be either a sequence, a container which\nsupports iteration, or an iterator.  If function is None, the identity\nfunction is assumed, that is, all elements of iterable that are false are\nremoved.\nNote that filter(function, iterable) is equivalent to the generator\nexpression (item for item in iterable if function(item)) if function is\nnot None and (item for item in iterable if item) if function is\nNone.\nSee itertools.filterfalse() for the complementary function that returns\nelements of iterable for which function returns false.\n", "\nformat(value[, format_spec])\u00c2\u00b6": "Convert a value to a \u00e2\u0080\u009cformatted\u00e2\u0080\u009d representation, as controlled by\nformat_spec.  The interpretation of format_spec will depend on the type\nof the value argument, however there is a standard formatting syntax that\nis used by most built-in types: Format Specification Mini-Language.\nThe default format_spec is an empty string which usually gives the same\neffect as calling str(value).\nA call to format(value, format_spec) is translated to\ntype(value).__format__(value, format_spec) which bypasses the instance\ndictionary when searching for the value\u00e2\u0080\u0099s __format__() method.  A\nTypeError exception is raised if the method search reaches\nobject and the format_spec is non-empty, or if either the\nformat_spec or the return value are not strings.\n\nChanged in version 3.4: object().__format__(format_spec) raises TypeError\nif format_spec is not an empty string.\n\n", "\ngetattr(object, name[, default])\u00c2\u00b6": "Return the value of the named attribute of object.  name must be a string.\nIf the string is the name of one of the object\u00e2\u0080\u0099s attributes, the result is the\nvalue of that attribute.  For example, getattr(x, 'foobar') is equivalent to\nx.foobar.  If the named attribute does not exist, default is returned if\nprovided, otherwise AttributeError is raised.\n", "\nglobals()\u00c2\u00b6": "Return a dictionary representing the current global symbol table. This is always\nthe dictionary of the current module (inside a function or method, this is the\nmodule where it is defined, not the module from which it is called).\n", "\nhasattr(object, name)\u00c2\u00b6": "The arguments are an object and a string.  The result is True if the\nstring is the name of one of the object\u00e2\u0080\u0099s attributes, False if not. (This\nis implemented by calling getattr(object, name) and seeing whether it\nraises an AttributeError or not.)\n", "\nhash(object)\u00c2\u00b6": "\nReturn the hash value of the object (if it has one).  Hash values are\nintegers.  They are used to quickly compare dictionary keys during a\ndictionary lookup.  Numeric values that compare equal have the same hash\nvalue (even if they are of different types, as is the case for 1 and 1.0).\n\nNote\nFor objects with custom __hash__() methods, note that hash()\ntruncates the return value based on the bit width of the host machine.\nSee __hash__() for details.\n\n", "\nhelp([object])\u00c2\u00b6": "Invoke the built-in help system.  (This function is intended for interactive\nuse.)  If no argument is given, the interactive help system starts on the\ninterpreter console.  If the argument is a string, then the string is looked up\nas the name of a module, function, class, method, keyword, or documentation\ntopic, and a help page is printed on the console.  If the argument is any other\nkind of object, a help page on the object is generated.\nThis function is added to the built-in namespace by the site module.\n\nChanged in version 3.4: Changes to pydoc and inspect mean that the reported\nsignatures for callables are now more comprehensive and consistent.\n\n", "\nhex(x)\u00c2\u00b6": "Convert an integer number to a lowercase hexadecimal string prefixed with\n\u00e2\u0080\u009c0x\u00e2\u0080\u009d. If x is not a Python int object, it has to define an\n__index__() method that returns an integer. Some examples:\n>>> hex(255)\n'0xff'\n>>> hex(-42)\n'-0x2a'\n\n\nIf you want to convert an integer number to an uppercase or lower hexadecimal\nstring with prefix or not, you can use either of the following ways:\n>>> '%#x' % 255, '%x' % 255, '%X' % 255\n('0xff', 'ff', 'FF')\n>>> format(255, '#x'), format(255, 'x'), format(255, 'X')\n('0xff', 'ff', 'FF')\n>>> f'{255:#x}', f'{255:x}', f'{255:X}'\n('0xff', 'ff', 'FF')\n\n\nSee also format() for more information.\nSee also int() for converting a hexadecimal string to an\ninteger using a base of 16.\n\nNote\nTo obtain a hexadecimal string representation for a float, use the\nfloat.hex() method.\n\n", "\nid(object)\u00c2\u00b6": "Return the \u00e2\u0080\u009cidentity\u00e2\u0080\u009d of an object.  This is an integer which\nis guaranteed to be unique and constant for this object during its lifetime.\nTwo objects with non-overlapping lifetimes may have the same id()\nvalue.\n\nCPython implementation detail: This is the address of the object in memory.\n\n", "\ninput([prompt])\u00c2\u00b6": "If the prompt argument is present, it is written to standard output without\na trailing newline.  The function then reads a line from input, converts it\nto a string (stripping a trailing newline), and returns that.  When EOF is\nread, EOFError is raised.  Example:\n>>> s = input('--> ')  \n--> Monty Python's Flying Circus\n>>> s  \n\"Monty Python's Flying Circus\"\n\n\nIf the readline module was loaded, then input() will use it\nto provide elaborate line editing and history features.\n", "\nisinstance(object, classinfo)\u00c2\u00b6": "Return true if the object argument is an instance of the classinfo\nargument, or of a (direct, indirect or virtual) subclass thereof.  If object is not\nan object of the given type, the function always returns false.\nIf classinfo is a tuple of type objects (or recursively, other such\ntuples), return true if object is an instance of any of the types.\nIf classinfo is not a type or tuple of types and such tuples,\na TypeError exception is raised.\n", "\nissubclass(class, classinfo)\u00c2\u00b6": "Return true if class is a subclass (direct, indirect or virtual) of classinfo.  A\nclass is considered a subclass of itself. classinfo may be a tuple of class\nobjects, in which case every entry in classinfo will be checked. In any other\ncase, a TypeError exception is raised.\n", "\niter(object[, sentinel])\u00c2\u00b6": "Return an iterator object.  The first argument is interpreted very\ndifferently depending on the presence of the second argument. Without a\nsecond argument, object must be a collection object which supports the\niteration protocol (the __iter__() method), or it must support the\nsequence protocol (the __getitem__() method with integer arguments\nstarting at 0).  If it does not support either of those protocols,\nTypeError is raised. If the second argument, sentinel, is given,\nthen object must be a callable object.  The iterator created in this case\nwill call object with no arguments for each call to its\n__next__() method; if the value returned is equal to\nsentinel, StopIteration will be raised, otherwise the value will\nbe returned.\nSee also Iterator Types.\nOne useful application of the second form of iter() is to read lines of\na file until a certain line is reached.  The following example reads a file\nuntil the readline() method returns an empty string:\nwith open('mydata.txt') as fp:\n    for line in iter(fp.readline, ''):\n        process_line(line)\n\n\n", "\nlen(s)\u00c2\u00b6": "Return the length (the number of items) of an object.  The argument may be a\nsequence (such as a string, bytes, tuple, list, or range) or a collection\n(such as a dictionary, set, or frozen set).\n", "\nlocals()\u00c2\u00b6": "Update and return a dictionary representing the current local symbol table.\nFree variables are returned by locals() when it is called in function\nblocks, but not in class blocks.\n\nNote\nThe contents of this dictionary should not be modified; changes may not\naffect the values of local and free variables used by the interpreter.\n\n", "\nmap(function, iterable, ...)\u00c2\u00b6": "Return an iterator that applies function to every item of iterable,\nyielding the results.  If additional iterable arguments are passed,\nfunction must take that many arguments and is applied to the items from all\niterables in parallel.  With multiple iterables, the iterator stops when the\nshortest iterable is exhausted.  For cases where the function inputs are\nalready arranged into argument tuples, see itertools.starmap().\n", "\nmax(iterable, *[, key, default])\u00c2\u00b6": "Return the largest item in an iterable or the largest of two or more\narguments.\nIf one positional argument is provided, it should be an iterable.\nThe largest item in the iterable is returned.  If two or more positional\narguments are provided, the largest of the positional arguments is\nreturned.\nThere are two optional keyword-only arguments. The key argument specifies\na one-argument ordering function like that used for list.sort(). The\ndefault argument specifies an object to return if the provided iterable is\nempty. If the iterable is empty and default is not provided, a\nValueError is raised.\nIf multiple items are maximal, the function returns the first one\nencountered.  This is consistent with other sort-stability preserving tools\nsuch as sorted(iterable, key=keyfunc, reverse=True)[0] and\nheapq.nlargest(1, iterable, key=keyfunc).\n\nNew in version 3.4: The default keyword-only argument.\n\n", "\nmemoryview(obj)": "Return a \u00e2\u0080\u009cmemory view\u00e2\u0080\u009d object created from the given argument.  See\nMemory Views for more information.\n", "\nmin(iterable, *[, key, default])\u00c2\u00b6": "Return the smallest item in an iterable or the smallest of two or more\narguments.\nIf one positional argument is provided, it should be an iterable.\nThe smallest item in the iterable is returned.  If two or more positional\narguments are provided, the smallest of the positional arguments is\nreturned.\nThere are two optional keyword-only arguments. The key argument specifies\na one-argument ordering function like that used for list.sort(). The\ndefault argument specifies an object to return if the provided iterable is\nempty. If the iterable is empty and default is not provided, a\nValueError is raised.\nIf multiple items are minimal, the function returns the first one\nencountered.  This is consistent with other sort-stability preserving tools\nsuch as sorted(iterable, key=keyfunc)[0] and heapq.nsmallest(1,\niterable, key=keyfunc).\n\nNew in version 3.4: The default keyword-only argument.\n\n", "\nnext(iterator[, default])\u00c2\u00b6": "Retrieve the next item from the iterator by calling its\n__next__() method.  If default is given, it is returned\nif the iterator is exhausted, otherwise StopIteration is raised.\n", "\noct(x)\u00c2\u00b6": "Convert an integer number to an octal string prefixed with \u00e2\u0080\u009c0o\u00e2\u0080\u009d.  The result\nis a valid Python expression. If x is not a Python int object, it\nhas to define an __index__() method that returns an integer. For\nexample:\n>>> oct(8)\n'0o10'\n>>> oct(-56)\n'-0o70'\n\n\nIf you want to convert an integer number to octal string either with prefix\n\u00e2\u0080\u009c0o\u00e2\u0080\u009d or not, you can use either of the following ways.\n>>> '%#o' % 10, '%o' % 10\n('0o12', '12')\n>>> format(10, '#o'), format(10, 'o')\n('0o12', '12')\n>>> f'{10:#o}', f'{10:o}'\n('0o12', '12')\n\n\nSee also format() for more information.\n\n\n", "\nopen(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\u00c2\u00b6": "Open file and return a corresponding file object.  If the file\ncannot be opened, an OSError is raised.\nfile is a path-like object giving the pathname (absolute or\nrelative to the current working directory) of the file to be opened or an\ninteger file descriptor of the file to be wrapped.  (If a file descriptor is\ngiven, it is closed when the returned I/O object is closed, unless closefd\nis set to False.)\nmode is an optional string that specifies the mode in which the file is\nopened.  It defaults to 'r' which means open for reading in text mode.\nOther common values are 'w' for writing (truncating the file if it\nalready exists), 'x' for exclusive creation and 'a' for appending\n(which on some Unix systems, means that all writes append to the end of\nthe file regardless of the current seek position).  In text mode, if\nencoding is not specified the encoding used is platform dependent:\nlocale.getpreferredencoding(False) is called to get the current locale\nencoding. (For reading and writing raw bytes use binary mode and leave\nencoding unspecified.)  The available modes are:\n\n\n\n\n\n\nCharacter\nMeaning\n\n\n\n'r'\nopen for reading (default)\n\n'w'\nopen for writing, truncating the file first\n\n'x'\nopen for exclusive creation, failing if the file already exists\n\n'a'\nopen for writing, appending to the end of the file if it exists\n\n'b'\nbinary mode\n\n't'\ntext mode (default)\n\n'+'\nopen a disk file for updating (reading and writing)\n\n'U'\nuniversal newlines mode (deprecated)\n\n\n\nThe default mode is 'r' (open for reading text, synonym of 'rt').\nFor binary read-write access, the mode 'w+b' opens and truncates the file\nto 0 bytes.  'r+b' opens the file without truncation.\nAs mentioned in the Overview, Python distinguishes between binary\nand text I/O.  Files opened in binary mode (including 'b' in the mode\nargument) return contents as bytes objects without any decoding.  In\ntext mode (the default, or when 't' is included in the mode argument),\nthe contents of the file are returned as str, the bytes having been\nfirst decoded using a platform-dependent encoding or using the specified\nencoding if given.\n\nNote\nPython doesn\u00e2\u0080\u0099t depend on the underlying operating system\u00e2\u0080\u0099s notion of text\nfiles; all the processing is done by Python itself, and is therefore\nplatform-independent.\n\nbuffering is an optional integer used to set the buffering policy.  Pass 0\nto switch buffering off (only allowed in binary mode), 1 to select line\nbuffering (only usable in text mode), and an integer > 1 to indicate the size\nin bytes of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n\nBinary files are buffered in fixed-size chunks; the size of the buffer is\nchosen using a heuristic trying to determine the underlying device\u00e2\u0080\u0099s \u00e2\u0080\u009cblock\nsize\u00e2\u0080\u009d and falling back on io.DEFAULT_BUFFER_SIZE.  On many systems,\nthe buffer will typically be 4096 or 8192 bytes long.\n\u00e2\u0080\u009cInteractive\u00e2\u0080\u009d text files (files for which isatty()\nreturns True) use line buffering.  Other text files use the policy\ndescribed above for binary files.\n\nencoding is the name of the encoding used to decode or encode the file.\nThis should only be used in text mode.  The default encoding is platform\ndependent (whatever locale.getpreferredencoding() returns), but any\ntext encoding supported by Python\ncan be used.  See the codecs module for\nthe list of supported encodings.\nerrors is an optional string that specifies how encoding and decoding\nerrors are to be handled\u00e2\u0080\u0094this cannot be used in binary mode.\nA variety of standard error handlers are available\n(listed under Error Handlers), though any\nerror handling name that has been registered with\ncodecs.register_error() is also valid.  The standard names\ninclude:\n\n'strict' to raise a ValueError exception if there is\nan encoding error.  The default value of None has the same\neffect.\n'ignore' ignores errors.  Note that ignoring encoding errors\ncan lead to data loss.\n'replace' causes a replacement marker (such as '?') to be inserted\nwhere there is malformed data.\n'surrogateescape' will represent any incorrect bytes as code\npoints in the Unicode Private Use Area ranging from U+DC80 to\nU+DCFF.  These private code points will then be turned back into\nthe same bytes when the surrogateescape error handler is used\nwhen writing data.  This is useful for processing files in an\nunknown encoding.\n'xmlcharrefreplace' is only supported when writing to a file.\nCharacters not supported by the encoding are replaced with the\nappropriate XML character reference &#nnn;.\n'backslashreplace' replaces malformed data by Python\u00e2\u0080\u0099s backslashed\nescape sequences.\n'namereplace' (also only supported when writing)\nreplaces unsupported characters with \\N{...} escape sequences.\n\nnewline controls how universal newlines mode works (it only\napplies to text mode).  It can be None, '', '\\n', '\\r', and\n'\\r\\n'.  It works as follows:\n\nWhen reading input from the stream, if newline is None, universal\nnewlines mode is enabled.  Lines in the input can end in '\\n',\n'\\r', or '\\r\\n', and these are translated into '\\n' before\nbeing returned to the caller.  If it is '', universal newlines mode is\nenabled, but line endings are returned to the caller untranslated.  If it\nhas any of the other legal values, input lines are only terminated by the\ngiven string, and the line ending is returned to the caller untranslated.\nWhen writing output to the stream, if newline is None, any '\\n'\ncharacters written are translated to the system default line separator,\nos.linesep.  If newline is '' or '\\n', no translation\ntakes place.  If newline is any of the other legal values, any '\\n'\ncharacters written are translated to the given string.\n\nIf closefd is False and a file descriptor rather than a filename was\ngiven, the underlying file descriptor will be kept open when the file is\nclosed.  If a filename is given closefd must be True (the default)\notherwise an error will be raised.\nA custom opener can be used by passing a callable as opener. The underlying\nfile descriptor for the file object is then obtained by calling opener with\n(file, flags). opener must return an open file descriptor (passing\nos.open as opener results in functionality similar to passing\nNone).\nThe newly created file is non-inheritable.\nThe following example uses the dir_fd parameter of the\nos.open() function to open a file relative to a given directory:\n>>> import os\n>>> dir_fd = os.open('somedir', os.O_RDONLY)\n>>> def opener(path, flags):\n...     return os.open(path, flags, dir_fd=dir_fd)\n...\n>>> with open('spamspam.txt', 'w', opener=opener) as f:\n...     print('This will be written to somedir/spamspam.txt', file=f)\n...\n>>> os.close(dir_fd)  # don't leak a file descriptor\n\n\nThe type of file object returned by the open() function\ndepends on the mode.  When open() is used to open a file in a text\nmode ('w', 'r', 'wt', 'rt', etc.), it returns a subclass of\nio.TextIOBase (specifically io.TextIOWrapper).  When used\nto open a file in a binary mode with buffering, the returned class is a\nsubclass of io.BufferedIOBase.  The exact class varies: in read\nbinary mode, it returns an io.BufferedReader; in write binary and\nappend binary modes, it returns an io.BufferedWriter, and in\nread/write mode, it returns an io.BufferedRandom.  When buffering is\ndisabled, the raw stream, a subclass of io.RawIOBase,\nio.FileIO, is returned.\nSee also the file handling modules, such as, fileinput, io\n(where open() is declared), os, os.path, tempfile,\nand shutil.\n\n\nChanged in version 3.3: \nThe opener parameter was added.\nThe 'x' mode was added.\nIOError used to be raised, it is now an alias of OSError.\nFileExistsError is now raised if the file opened in exclusive\ncreation mode ('x') already exists.\n\n\n\n\n\nChanged in version 3.4: \nThe file is now non-inheritable.\n\n\n\n\nDeprecated since version 3.4, will be removed in version 4.0: The 'U' mode.\n\n\n\nChanged in version 3.5: \nIf the system call is interrupted and the signal handler does not raise an\nexception, the function now retries the system call instead of raising an\nInterruptedError exception (see PEP 475 for the rationale).\nThe 'namereplace' error handler was added.\n\n\n\n\n\nChanged in version 3.6: \nSupport added to accept objects implementing os.PathLike.\nOn Windows, opening a console buffer may return a subclass of\nio.RawIOBase other than io.FileIO.\n\n\n\n", "\nord(c)\u00c2\u00b6": "Given a string representing one Unicode character, return an integer\nrepresenting the Unicode code point of that character.  For example,\nord('a') returns the integer 97 and ord('\u00e2\u0082\u00ac') (Euro sign)\nreturns 8364.  This is the inverse of chr().\n", "\npow(x, y[, z])\u00c2\u00b6": "Return x to the power y; if z is present, return x to the power y,\nmodulo z (computed more efficiently than pow(x, y) % z). The two-argument\nform pow(x, y) is equivalent to using the power operator: x**y.\nThe arguments must have numeric types.  With mixed operand types, the\ncoercion rules for binary arithmetic operators apply.  For int\noperands, the result has the same type as the operands (after coercion)\nunless the second argument is negative; in that case, all arguments are\nconverted to float and a float result is delivered.  For example, 10**2\nreturns 100, but 10**-2 returns 0.01.  If the second argument is\nnegative, the third argument must be omitted.  If z is present, x and y\nmust be of integer types, and y must be non-negative.\n", "\nprint(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\u00c2\u00b6": "Print objects to the text stream file, separated by sep and followed\nby end.  sep, end, file and flush, if present, must be given as keyword\narguments.\nAll non-keyword arguments are converted to strings like str() does and\nwritten to the stream, separated by sep and followed by end.  Both sep\nand end must be strings; they can also be None, which means to use the\ndefault values.  If no objects are given, print() will just write\nend.\nThe file argument must be an object with a write(string) method; if it\nis not present or None, sys.stdout will be used.  Since printed\narguments are converted to text strings, print() cannot be used with\nbinary mode file objects.  For these, use file.write(...) instead.\nWhether output is buffered is usually determined by file, but if the\nflush keyword argument is true, the stream is forcibly flushed.\n\nChanged in version 3.3: Added the flush keyword argument.\n\n", "\nrange(stop)": "Rather than being a function, range is actually an immutable\nsequence type, as documented in Ranges and Sequence Types \u00e2\u0080\u0094 list, tuple, range.\n", "\nrepr(object)\u00c2\u00b6": "Return a string containing a printable representation of an object.  For many\ntypes, this function makes an attempt to return a string that would yield an\nobject with the same value when passed to eval(), otherwise the\nrepresentation is a string enclosed in angle brackets that contains the name\nof the type of the object together with additional information often\nincluding the name and address of the object.  A class can control what this\nfunction returns for its instances by defining a __repr__() method.\n", "\nreversed(seq)\u00c2\u00b6": "Return a reverse iterator.  seq must be an object which has\na __reversed__() method or supports the sequence protocol (the\n__len__() method and the __getitem__() method with integer\narguments starting at 0).\n", "\nround(number[, ndigits])\u00c2\u00b6": "Return number rounded to ndigits precision after the decimal\npoint.  If ndigits is omitted or is None, it returns the\nnearest integer to its input.\nFor the built-in types supporting round(), values are rounded to the\nclosest multiple of 10 to the power minus ndigits; if two multiples are\nequally close, rounding is done toward the even choice (so, for example,\nboth round(0.5) and round(-0.5) are 0, and round(1.5) is\n2).  Any integer value is valid for ndigits (positive, zero, or\nnegative).  The return value is an integer if called with one argument,\notherwise of the same type as number.\nFor a general Python object number, round(number, ndigits) delegates to\nnumber.__round__(ndigits).\n\nNote\nThe behavior of round() for floats can be surprising: for example,\nround(2.675, 2) gives 2.67 instead of the expected 2.68.\nThis is not a bug: it\u00e2\u0080\u0099s a result of the fact that most decimal fractions\ncan\u00e2\u0080\u0099t be represented exactly as a float.  See Floating Point Arithmetic:  Issues and Limitations for\nmore information.\n\n", "\nsetattr(object, name, value)\u00c2\u00b6": "This is the counterpart of getattr().  The arguments are an object, a\nstring and an arbitrary value.  The string may name an existing attribute or a\nnew attribute.  The function assigns the value to the attribute, provided the\nobject allows it.  For example, setattr(x, 'foobar', 123) is equivalent to\nx.foobar = 123.\n", "\nsorted(iterable, *, key=None, reverse=False)\u00c2\u00b6": "Return a new sorted list from the items in iterable.\nHas two optional arguments which must be specified as keyword arguments.\nkey specifies a function of one argument that is used to extract a comparison\nkey from each list element: key=str.lower.  The default value is None\n(compare the elements directly).\nreverse is a boolean value.  If set to True, then the list elements are\nsorted as if each comparison were reversed.\nUse functools.cmp_to_key() to convert an old-style cmp function to a\nkey function.\nThe built-in sorted() function is guaranteed to be stable. A sort is\nstable if it guarantees not to change the relative order of elements that\ncompare equal \u00e2\u0080\u0094 this is helpful for sorting in multiple passes (for\nexample, sort by department, then by salary grade).\nFor sorting examples and a brief sorting tutorial, see Sorting HOW TO.\n", "\n@staticmethod\u00c2\u00b6": "Transform a method into a static method.\nA static method does not receive an implicit first argument. To declare a static\nmethod, use this idiom:\nclass C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n\n\nThe @staticmethod form is a function decorator \u00e2\u0080\u0093 see the\ndescription of function definitions in Function definitions for details.\nIt can be called either on the class (such as C.f()) or on an instance (such\nas C().f()).  The instance is ignored except for its class.\nStatic methods in Python are similar to those found in Java or C++. Also see\nclassmethod() for a variant that is useful for creating alternate class\nconstructors.\nLike all decorators, it is also possible to call staticmethod as\na regular function and do something with its result.  This is needed\nin some cases where you need a reference to a function from a class\nbody and you want to avoid the automatic transformation to instance\nmethod.  For these cases, use this idiom:\n\n\nclass C:\nbuiltin_open = staticmethod(open)\n\n\nFor more information on static methods, consult the documentation on the\nstandard type hierarchy in The standard type hierarchy.\n", "\nsum(iterable[, start])\u00c2\u00b6": "Sums start and the items of an iterable from left to right and returns the\ntotal.  start defaults to 0. The iterable\u00e2\u0080\u0099s items are normally numbers,\nand the start value is not allowed to be a string.\nFor some use cases, there are good alternatives to sum().\nThe preferred, fast way to concatenate a sequence of strings is by calling\n''.join(sequence).  To add floating point values with extended precision,\nsee math.fsum().  To concatenate a series of iterables, consider using\nitertools.chain().\n", "\nsuper([type[, object-or-type]])\u00c2\u00b6": "Return a proxy object that delegates method calls to a parent or sibling\nclass of type.  This is useful for accessing inherited methods that have\nbeen overridden in a class. The search order is same as that used by\ngetattr() except that the type itself is skipped.\nThe __mro__ attribute of the type lists the method\nresolution search order used by both getattr() and super().  The\nattribute is dynamic and can change whenever the inheritance hierarchy is\nupdated.\nIf the second argument is omitted, the super object returned is unbound.  If\nthe second argument is an object, isinstance(obj, type) must be true.  If\nthe second argument is a type, issubclass(type2, type) must be true (this\nis useful for classmethods).\nThere are two typical use cases for super.  In a class hierarchy with\nsingle inheritance, super can be used to refer to parent classes without\nnaming them explicitly, thus making the code more maintainable.  This use\nclosely parallels the use of super in other programming languages.\nThe second use case is to support cooperative multiple inheritance in a\ndynamic execution environment.  This use case is unique to Python and is\nnot found in statically compiled languages or languages that only support\nsingle inheritance.  This makes it possible to implement \u00e2\u0080\u009cdiamond diagrams\u00e2\u0080\u009d\nwhere multiple base classes implement the same method.  Good design dictates\nthat this method have the same calling signature in every case (because the\norder of calls is determined at runtime, because that order adapts\nto changes in the class hierarchy, and because that order can include\nsibling classes that are unknown prior to runtime).\nFor both use cases, a typical superclass call looks like this:\nclass C(B):\n    def method(self, arg):\n        super().method(arg)    # This does the same thing as:\n                               # super(C, self).method(arg)\n\n\nNote that super() is implemented as part of the binding process for\nexplicit dotted attribute lookups such as super().__getitem__(name).\nIt does so by implementing its own __getattribute__() method for searching\nclasses in a predictable order that supports cooperative multiple inheritance.\nAccordingly, super() is undefined for implicit lookups using statements or\noperators such as super()[name].\nAlso note that, aside from the zero argument form, super() is not\nlimited to use inside methods.  The two argument form specifies the\narguments exactly and makes the appropriate references.  The zero\nargument form only works inside a class definition, as the compiler fills\nin the necessary details to correctly retrieve the class being defined,\nas well as accessing the current instance for ordinary methods.\nFor practical suggestions on how to design cooperative classes using\nsuper(), see guide to using super().\n", "\ntuple([iterable])": "Rather than being a function, tuple is actually an immutable\nsequence type, as documented in Tuples and Sequence Types \u00e2\u0080\u0094 list, tuple, range.\n", "\nvars([object])\u00c2\u00b6": "Return the __dict__ attribute for a module, class, instance,\nor any other object with a __dict__ attribute.\nObjects such as modules and instances have an updateable __dict__\nattribute; however, other objects may have write restrictions on their\n__dict__ attributes (for example, classes use a\ntypes.MappingProxyType to prevent direct dictionary updates).\nWithout an argument, vars() acts like locals().  Note, the\nlocals dictionary is only useful for reads since updates to the locals\ndictionary are ignored.\n", "\nzip(*iterables)\u00c2\u00b6": "Make an iterator that aggregates elements from each of the iterables.\nReturns an iterator of tuples, where the i-th tuple contains\nthe i-th element from each of the argument sequences or iterables.  The\niterator stops when the shortest input iterable is exhausted. With a single\niterable argument, it returns an iterator of 1-tuples.  With no arguments,\nit returns an empty iterator.  Equivalent to:\ndef zip(*iterables):\n    # zip('ABCD', 'xy') --> Ax By\n    sentinel = object()\n    iterators = [iter(it) for it in iterables]\n    while iterators:\n        result = []\n        for it in iterators:\n            elem = next(it, sentinel)\n            if elem is sentinel:\n                return\n            result.append(elem)\n        yield tuple(result)\n\n\nThe left-to-right evaluation order of the iterables is guaranteed. This\nmakes possible an idiom for clustering a data series into n-length groups\nusing zip(*[iter(s)]*n).  This repeats the same iterator n times\nso that each output tuple has the result of n calls to the iterator.\nThis has the effect of dividing the input into n-length chunks.\nzip() should only be used with unequal length inputs when you don\u00e2\u0080\u0099t\ncare about trailing, unmatched values from the longer iterables.  If those\nvalues are important, use itertools.zip_longest() instead.\nzip() in conjunction with the * operator can be used to unzip a\nlist:\n>>> x = [1, 2, 3]\n>>> y = [4, 5, 6]\n>>> zipped = zip(x, y)\n>>> list(zipped)\n[(1, 4), (2, 5), (3, 6)]\n>>> x2, y2 = zip(*zip(x, y))\n>>> x == list(x2) and y == list(y2)\nTrue\n\n\n", "\n__import__(name, globals=None, locals=None, fromlist=(), level=0)\u00c2\u00b6": "\nNote\nThis is an advanced function that is not needed in everyday Python\nprogramming, unlike importlib.import_module().\n\nThis function is invoked by the import statement.  It can be\nreplaced (by importing the builtins module and assigning to\nbuiltins.__import__) in order to change semantics of the\nimport statement, but doing so is strongly discouraged as it\nis usually simpler to use import hooks (see PEP 302) to attain the same\ngoals and does not cause issues with code which assumes the default import\nimplementation is in use.  Direct use of __import__() is also\ndiscouraged in favor of importlib.import_module().\nThe function imports the module name, potentially using the given globals\nand locals to determine how to interpret the name in a package context.\nThe fromlist gives the names of objects or submodules that should be\nimported from the module given by name.  The standard implementation does\nnot use its locals argument at all, and uses its globals only to\ndetermine the package context of the import statement.\nlevel specifies whether to use absolute or relative imports. 0 (the\ndefault) means only perform absolute imports.  Positive values for\nlevel indicate the number of parent directories to search relative to the\ndirectory of the module calling __import__() (see PEP 328 for the\ndetails).\nWhen the name variable is of the form package.module, normally, the\ntop-level package (the name up till the first dot) is returned, not the\nmodule named by name.  However, when a non-empty fromlist argument is\ngiven, the module named by name is returned.\nFor example, the statement import spam results in bytecode resembling the\nfollowing code:\nspam = __import__('spam', globals(), locals(), [], 0)\n\n\nThe statement import spam.ham results in this call:\nspam = __import__('spam.ham', globals(), locals(), [], 0)\n\n\nNote how __import__() returns the toplevel module here because this is\nthe object that is bound to a name by the import statement.\nOn the other hand, the statement from spam.ham import eggs, sausage as\nsaus results in\n_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\neggs = _temp.eggs\nsaus = _temp.sausage\n\n\nHere, the spam.ham module is returned from __import__().  From this\nobject, the names to import are retrieved and assigned to their respective\nnames.\nIf you simply want to import a module (potentially within a package) by name,\nuse importlib.import_module().\n\nChanged in version 3.3: Negative values for level are no longer supported (which also changes\nthe default value to 0).\n\n"}